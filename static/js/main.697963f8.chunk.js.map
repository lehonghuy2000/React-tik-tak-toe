{"version":3,"sources":["Components/Square.js","Components/Board.js","App.js","index.js"],"names":["Square","props","classes","winner","className","onClick","value","Board","square","renderSquare","i","squares","a","b","c","board","j","push","calculateWinner","lines","length","playerwin","App","useState","history","Array","fill","location","x","y","stepNumber","xIsNext","isOrder","chessState","updateState","current","historyArr","slice","reverse","status","moves","map","step","move","desc","concat","stepTostep","prevState","jumpTo","console","log","parseInt","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.697963f8.chunk.js","sourcesContent":["function Square(props) {\n    let classes = \"square\";\n    if(props.winner)\n    {\n      classes = \"square\" + \" win-item\";\n    }\n    return (\n      <button className={classes} onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\nexport default Square;","import React from \"react\";\nimport Square from \"./Square\"\nconst Board = (props) => {\n    const renderSquare = (i) => {\n      if(props.winner)\n      {return (\n        <Square\n          value={props.squares[i]}\n          winner ={(i===props.winner.a||i===props.winner.b||i===props.winner.c) ? true : null}\n          onClick={() => props.onClick(i)}\n        />\n      );}\n      else\n      {\n        return (\n        <Square\n          value={props.squares[i]}\n          onClick={() => props.onClick(i)}\n        />);\n      }\n    }\n    let square;\n    let board=[];\n    for(let i=0;i<9;i+=3)\n    {\n      square=[];\n      for(let j=0;j<3;j++)\n      {\n        square.push(renderSquare(i+j));\n      }\n      board.push(\n        <div key={i} className=\"board-row\">\n\t\t\t\t\t{square}\n\t\t\t\t</div>\n      )\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n  export default Board;","import React, {useState} from \"react\";\nimport Board from \"./Components/Board\";\nimport \"./App.css\"\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {a: a, b:b, c:c, playerwin: squares[a]};\n    }\n  }\n  return null;\n}\n\nconst App = () => {\n    const [chessState, updateState]= useState({\n      history: [\n        {\n          squares: Array(9).fill(null),\n          location:{x:null, y:null}\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isOrder: false\n    })\n    const handleClick = (i) => {\n      const history = chessState.history.slice(0, chessState.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      const location = {x: parseInt((i)%3+1), y:parseInt((i)/3+1)};\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n      squares[i] = chessState.xIsNext ? \"X\" : \"O\";\n      updateState((prevState)=>{\n        return{\n        ...prevState,\n        history: history.concat([\n          {\n            squares: squares,\n            location: location\n          }\n        ]),\n        stepNumber: history.length,\n        xIsNext: !chessState.xIsNext}\n      });\n    }\n  \n    const jumpTo= (step) => {\n      updateState((prevState) => {\n        return{\n          ...prevState,\n          stepNumber: step,\n          xIsNext: (step % 2) === 0}\n\n      });\n    }\n    const modeReverse =()=>{\n      updateState((prevState) => {\n        return{\n          ...prevState,\n          isOrder: !chessState.isOrder}\n      });\n    }\n    const history = chessState.history;\n    const current = history[chessState.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const historyArr = chessState.history.slice();\n    if(chessState.isOrder)\n    {\n      historyArr.reverse();\n    }\n    const moves = historyArr.map((step, move) => {\n      let desc = move ?\n      'Go to move '.concat(`(${step.location.x}: ${step.location.y})`):\n        'Go to game start';\n        if(move===0 && chessState.isOrder)\n        {\n          desc='Go to move '.concat(`(${step.location.x}: ${step.location.y})`);\n        }\n      if(move===historyArr.length-1 && chessState.isOrder)\n      {\n        desc='Go to game start';\n      }\n      let stepTostep = move;\n      if(chessState.isOrder)\n      {\n        stepTostep=historyArr.length-1-move;\n      }\n      return (\n        <li key={stepTostep}>\n          <button \n          className={stepTostep===chessState.stepNumber ? \"bold-item\" : null}\n          onClick={() => jumpTo(stepTostep)}>{desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner.playerwin;\n    } else {\n      status = \"Next player: \" + (chessState.xIsNext ? \"X\" : \"O\");\n    }\n    console.log(current.squares.length)\n    if(!winner && chessState.history.slice(0, chessState.stepNumber + 1).length===10 )\n    {\n      status=\"Draw\";\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winner ={winner ? winner : null}\n            onClick={i => handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n        <button onClick={()=>{modeReverse()}}>Change Order</button>\n      </div>\n    );\n  }\n\n  export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}